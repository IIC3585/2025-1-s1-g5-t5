---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import ComplexNavbar from '../components/complexNavbar';
import ComplexFooter from '../components/complexFooter';
import CardProduct from '../components/products/cardProduct';
import '../../assets/scss/astro-ecommerce.scss';

// Fetch all products from Content Collections (SSG)
const allProducts = await getCollection('products');
const allCategories = await getCollection('categories');
const products = allProducts.map(product => product.data);
const categories = allCategories.map(category => category.data);
const uniqueCategories = [...new Set(products.map(p => p.category))];
---

<Layout title="Products - E-Store">
  <ComplexNavbar client:load />
  
  <main>
    <!-- Hero Section -->
    <section class="products-hero">
      <div class="container">
        <div class="row align-items-center">
          <div class="col-lg-8">
            <div class="hero-content">
              <span class="hero-badge">
                <i class="bi bi-shop me-2"></i>
                Our Collection
              </span>
              <h1 class="hero-title">
                Discover Amazing
                <span class="hero-title-accent">Products</span>
              </h1>
              <p class="hero-description">
                Explore {products.length} carefully curated products across {uniqueCategories.length} unique categories. 
                Find your perfect style with our premium collection.
              </p>
            </div>
          </div>
          <div class="col-lg-4">
            <div class="hero-stats-grid">
              <div class="stat-card-small">
                <div class="stat-icon">
                  <i class="bi bi-bag"></i>
                </div>
                <h3>{products.length}</h3>
                <p>Products</p>
              </div>
              <div class="stat-card-small">
                <div class="stat-icon">
                  <i class="bi bi-grid"></i>
                </div>
                <h3>{categories.length}</h3>
                <p>Categories</p>
              </div>
              <div class="stat-card-small">
                <div class="stat-icon">
                  <i class="bi bi-lightning"></i>
                </div>
                <h3>{products.length + categories.length + 4}</h3>
                <p>Static Pages</p>
              </div>
              <div class="stat-card-small">
                <div class="stat-icon">
                  <i class="bi bi-star"></i>
                </div>
                <h3>4.8</h3>
                <p>Avg Rating</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Products Section -->
    <section class="products-section">
      <div class="container">
        <div class="row">
          <!-- Sidebar de filtros -->
          <div class="col-lg-3 mb-5 mb-lg-0">
            <div class="filters-sidebar">
              <h5 class="filter-title">
                <i class="bi bi-funnel me-2"></i>
                Filters
              </h5>
              
              <!-- Filtro por CategorÃ­a -->
              <div class="filter-section">
                <h6 class="filter-subtitle">Category</h6>
                <div class="filter-options">
                  <label class="filter-option">
                    <input type="checkbox" name="category" value="all" checked>
                    <span>All Categories</span>
                  </label>
                  {uniqueCategories.map(category => (
                    <label class="filter-option">
                      <input type="checkbox" name="category" value={category}>
                      <span>{category}</span>
                    </label>
                  ))}
                </div>
              </div>

              <!-- Filtro por Size -->
              <div class="filter-section">
                <h6 class="filter-subtitle">Size</h6>
                <div class="filter-options">
                  <label class="filter-option">
                    <input type="checkbox" name="size" value="all" checked>
                    <span>All Sizes</span>
                  </label>
                  <label class="filter-option">
                    <input type="checkbox" name="size" value="XS">
                    <span>XS</span>
                  </label>
                  <label class="filter-option">
                    <input type="checkbox" name="size" value="S">
                    <span>S</span>
                  </label>
                  <label class="filter-option">
                    <input type="checkbox" name="size" value="M">
                    <span>M</span>
                  </label>
                  <label class="filter-option">
                    <input type="checkbox" name="size" value="L">
                    <span>L</span>
                  </label>
                  <label class="filter-option">
                    <input type="checkbox" name="size" value="XL">
                    <span>XL</span>
                  </label>
                </div>
              </div>

              <!-- Reset Button -->
              <button class="reset-filters-btn" onclick="resetFilters()">
                <i class="bi bi-arrow-clockwise me-2"></i>
                Reset Filters
              </button>
            </div>
          </div>
          
          <!-- Grid de productos -->
          <div class="col-lg-9">
            <div class="d-flex justify-content-between align-items-center mb-5 flex-wrap gap-3">
              <div>
                <h4 class="font-weight-bold mb-1">All Products</h4>
                <p class="text-muted mb-0"><span id="products-count">{products.length}</span> products found</p>
              </div>
              <div class="d-flex gap-3 align-items-center">
                <select class="form-select rounded-pill" style="width: auto;">
                  <option>Sort by: Featured</option>
                  <option>Price: Low to High</option>
                  <option>Price: High to Low</option>
                  <option>Newest</option>
                  <option>Rating</option>
                </select>
                <div class="btn-group">
                  <button class="btn btn-outline-primary btn-sm" title="Grid View">
                    <i class="bi bi-grid-3x3-gap"></i>
                  </button>
                  <button class="btn btn-outline-primary btn-sm" title="List View">
                    <i class="bi bi-list"></i>
                  </button>
                </div>
              </div>
            </div>
            
            <div class="row g-4" id="products-grid">
              {products.map((product, index) => (
                <div 
                  class={`col-sm-6 col-lg-4 product-item ${index >= 24 ? 'product-item-hidden' : ''}`} 
                  data-category={product.category} 
                  data-size={product.size} 
                  data-product-id={product.id}
                  data-index={index}
                >
                  <CardProduct
                    client:load
                    id={product.id}
                    thumb_src={product.thumb_src}
                    thumb_alt={product.thumb_alt || product.title}
                    color={product.color}
                    title={product.title}
                    description={product.description}
                    price={product.price}
                    colors={product.colors}
                    position="center"
                    stock={product.stock}
                    category={product.category}
                    rating={product.rating}
                  />
                </div>
              ))}
            </div>
            
            <!-- Load More -->
            <div class="text-center mt-6" id="load-more-container">
              <button class="btn btn-primary btn-lg rounded-pill px-5 py-3" id="load-more-btn">
                <i class="bi bi-plus-circle me-2"></i>
                Load More Products
                <span class="badge bg-white text-primary ms-2" id="remaining-count">{products.length - 24}</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

      <ComplexFooter />
</Layout>

<style>
  /* Color Variables */
  :root {
    --primary: #6366f1;
    --primary-dark: #4f46e5;
    --secondary: #f1f5f9;
    --accent: #06b6d4;
    --dark: #0f172a;
    --gray: #64748b;
    --light-gray: #f8fafc;
    --white: #ffffff;
    --success: #10b981;
    --warning: #f59e0b;
    --gradient-primary: linear-gradient(135deg, #6366f1 0%, #06b6d4 100%);
    --gradient-secondary: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    --shadow: 0 10px 30px rgba(99, 102, 241, 0.1);
    --shadow-hover: 0 20px 40px rgba(99, 102, 241, 0.15);
  }

  /* Global Styles */
  body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: var(--dark);
  }

  /* Products Hero Section */
  .products-hero {
    background: var(--gradient-secondary);
    padding: 6rem 0 4rem 0;
    position: relative;
    overflow: hidden;
  }

  .hero-content {
    z-index: 2;
    position: relative;
  }

  .hero-badge {
    display: inline-block;
    background: var(--gradient-primary);
    color: var(--white);
    padding: 0.5rem 1.5rem;
    border-radius: 50px;
    font-size: 0.875rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    box-shadow: var(--shadow);
  }

  .hero-title {
    font-size: 3.5rem;
    font-weight: 800;
    line-height: 1.1;
    margin-bottom: 1.5rem;
    color: var(--dark);
  }

  .hero-title-accent {
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .hero-description {
    font-size: 1.25rem;
    color: var(--gray);
    margin-bottom: 2rem;
    line-height: 1.7;
  }

  .hero-stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
  }

  .stat-card-small {
    background: var(--white);
    padding: 1.5rem;
    border-radius: 16px;
    text-align: center;
    box-shadow: var(--shadow);
    transition: all 0.3s ease;
  }

  .stat-card-small:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-hover);
  }

  .stat-icon {
    width: 50px;
    height: 50px;
    background: var(--gradient-primary);
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1rem auto;
    color: var(--white);
    font-size: 1.5rem;
  }

  .stat-card-small h3 {
    font-size: 1.5rem;
    font-weight: 800;
    color: var(--primary);
    margin-bottom: 0.25rem;
  }

  .stat-card-small p {
    color: var(--gray);
    font-size: 0.875rem;
    margin: 0;
  }

  /* Products Section */
  .products-section {
    padding: 5rem 0;
    background: var(--white);
  }

  /* Section Headers */
  .section-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .section-title {
    font-size: 2.5rem;
    font-weight: 800;
    color: var(--dark);
    margin-bottom: 1rem;
  }

  .section-description {
    font-size: 1.125rem;
    color: var(--gray);
    max-width: 600px;
    margin: 0 auto;
  }

  /* Filters Sidebar */
  .filters-sidebar {
    background: var(--white);
    border-radius: 20px;
    padding: 2.5rem;
    box-shadow: var(--shadow);
    border: 1px solid #e2e8f0;
    position: sticky;
    top: 2rem;
  }

  .filter-title {
    color: var(--dark);
    font-weight: 700;
    font-size: 1.25rem;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid var(--secondary);
  }

  .filter-section {
    margin-bottom: 2.5rem;
  }

  .filter-subtitle {
    color: var(--dark);
    font-weight: 600;
    font-size: 1.1rem;
    margin-bottom: 1.5rem;
  }

  .filter-options {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .filter-option {
    display: flex;
    align-items: center;
    cursor: pointer;
    padding: 0.75rem;
    border-radius: 8px;
    transition: all 0.2s ease;
  }

  .filter-option:hover {
    background: var(--light-gray);
  }

  .filter-option input[type="checkbox"] {
    width: 20px;
    height: 20px;
    margin-right: 1rem;
    accent-color: var(--primary);
    cursor: pointer;
  }

  .filter-option span {
    font-size: 1rem;
    color: var(--gray);
    transition: color 0.2s ease;
    font-weight: 500;
  }

  .filter-option:hover span {
    color: var(--primary);
  }

  .reset-filters-btn {
    width: 100%;
    background: var(--gradient-primary);
    border: none;
    color: var(--white);
    padding: 1rem;
    border-radius: 12px;
    font-weight: 600;
    transition: all 0.3s ease;
    cursor: pointer;
    box-shadow: var(--shadow);
  }

  .reset-filters-btn:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-hover);
  }

  /* Product item visibility */
  .product-item-hidden {
    display: none !important;
  }

  /* Load More Button Styles */
  #load-more-btn {
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  #load-more-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);
  }

  #load-more-btn:active {
    transform: translateY(0);
  }

  #load-more-btn.loading {
    pointer-events: none;
    opacity: 0.7;
  }

  #load-more-btn.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid transparent;
    border-top: 2px solid white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Product Grid Animation */
  .product-item {
    animation: fadeInUp 0.6s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Smooth transitions for product cards */
  .card-product-hover {
    transition: all 0.3s ease;
  }

  .card-product-hover:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1) !important;
  }

  /* Responsive Design */
  @media (max-width: 991px) {
    .hero-stats-grid {
      grid-template-columns: repeat(2, 1fr);
      margin-top: 2rem;
    }
    
    .filters-sidebar {
      margin-bottom: 2rem;
      position: static;
    }
  }

  @media (max-width: 768px) {
    .hero-title {
      font-size: 2.5rem;
    }

    .hero-description {
      font-size: 1.125rem;
    }

    .section-title {
      font-size: 2rem;
    }

    .hero-stats-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Simple test to see if script is loading
  console.log('Script loaded!');
  
  // Global variables
  let productsPerPage = 24;
  let currentPage = 1;
  let totalProducts = 0;
  let filteredProducts = [];

  // Initialize the page
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM Content Loaded - Initializing Load More functionality');
    
    // Get total number of products
    const productItems = document.querySelectorAll('.product-item');
    totalProducts = productItems.length;
    filteredProducts = Array.from(productItems);
    
    console.log(`Found ${totalProducts} total products`);
    console.log(`Found ${filteredProducts.length} filtered products`);

    // Add event listener for Load More button
    const loadMoreBtn = document.getElementById('load-more-btn');
    console.log('Load More button:', loadMoreBtn);
    
    if (loadMoreBtn) {
      console.log('Load More button found, adding event listener');
      loadMoreBtn.addEventListener('click', function(e) {
        console.log('Button clicked!');
        e.preventDefault();
        loadMoreProducts();
      });
    } else {
      console.error('Load More button not found!');
    }

    // Initialize load more button state
    updateLoadMoreButton();
  });

  function resetFilters() {
    // Reset all checkboxes
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
      if (checkbox.value === 'all') {
        checkbox.checked = true;
      } else {
        checkbox.checked = false;
      }
    });
    
    // Reset filtered products
    filteredProducts = Array.from(document.querySelectorAll('.product-item'));
    currentPage = 1;
    
    // Re-render products
    renderProducts();
    updateLoadMoreButton();
  }

  function filterProducts() {
    const selectedCategories = [];
    const selectedSizes = [];
    
    // Get selected categories
    const categoryCheckboxes = document.querySelectorAll('input[name="category"]:checked');
    categoryCheckboxes.forEach(checkbox => {
      if (checkbox.value !== 'all') {
        selectedCategories.push(checkbox.value);
      }
    });
    
    // Get selected sizes
    const sizeCheckboxes = document.querySelectorAll('input[name="size"]:checked');
    sizeCheckboxes.forEach(checkbox => {
      if (checkbox.value !== 'all') {
        selectedSizes.push(checkbox.value);
      }
    });
    
    // Filter products
    const allProductItems = document.querySelectorAll('.product-item');
    filteredProducts = Array.from(allProductItems).filter(item => {
      const itemCategory = item.getAttribute('data-category');
      const itemSize = item.getAttribute('data-size');
      
      let showItem = true;
      
      // Check category filter
      if (selectedCategories.length > 0 && !selectedCategories.includes(itemCategory)) {
        showItem = false;
      }
      
      // Check size filter
      if (selectedSizes.length > 0 && !selectedSizes.includes(itemSize)) {
        showItem = false;
      }
      
      return showItem;
    });

    // Reset to first page when filtering
    currentPage = 1;
    
    // Re-render products
    renderProducts();
    updateLoadMoreButton();
  }

  function renderProducts() {
    const startIndex = 0;
    const endIndex = currentPage * productsPerPage;
    
    // Hide all products first
    filteredProducts.forEach(item => {
      item.classList.add('product-item-hidden');
    });
    
    // Show products up to current page
    const productsToShow = filteredProducts.slice(startIndex, endIndex);
    productsToShow.forEach(item => {
      item.classList.remove('product-item-hidden');
    });
    
    // Update products count
    const productsCountElement = document.getElementById('products-count');
    if (productsCountElement) {
      productsCountElement.textContent = filteredProducts.length;
    }
  }

  function loadMoreProducts() {
    console.log('loadMoreProducts function called!');
    console.log(`Current page: ${currentPage}`);
    console.log(`Filtered products: ${filteredProducts.length}`);
    
    const loadMoreBtn = document.getElementById('load-more-btn');
    const startIndex = currentPage * productsPerPage;
    const endIndex = startIndex + productsPerPage;
    const nextProducts = filteredProducts.slice(startIndex, endIndex);
    
    console.log(`Start index: ${startIndex}, End index: ${endIndex}`);
    console.log(`Next products to show: ${nextProducts.length}`);
    
    if (nextProducts.length > 0) {
      // Show new products
      nextProducts.forEach((product, index) => {
        setTimeout(() => {
          product.classList.remove('product-item-hidden');
          console.log(`Showing product ${index + 1}`);
        }, index * 100);
      });
      
      currentPage++;
      updateLoadMoreButton();
    } else {
      console.log('No more products to load');
    }
  }

  function updateLoadMoreButton() {
    const loadMoreBtn = document.getElementById('load-more-btn');
    const remainingCountElement = document.getElementById('remaining-count');
    
    const totalFiltered = filteredProducts.length;
    const currentlyShown = Math.min(currentPage * productsPerPage, totalFiltered);
    const remaining = totalFiltered - currentlyShown;
    
    console.log(`Total filtered: ${totalFiltered}, Currently shown: ${currentlyShown}, Remaining: ${remaining}`);
    
    if (remaining > 0) {
      loadMoreBtn.style.display = 'inline-flex';
      if (remainingCountElement) {
        remainingCountElement.textContent = remaining;
      }
    } else {
      loadMoreBtn.style.display = 'none';
    }
  }

  function addToCart(productId) {
    // Simple cart functionality - you can enhance this
    console.log(`Adding product ${productId} to cart`);
    // Here you would typically add to localStorage or a cart store
    alert(`Product ${productId} added to cart!`);
  }
</script>